version: 0.2

phases:
  install:
    runtime-versions:
      docker: 19
      java: corretto11
  pre_build:
    commands:
      - echo "ECRにログイン"
      - echo "`$AWS_DEFAULT_REGION` はビルドが実行されているAWSリージョン(AWS管理)"
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  build:
    commands:
      - echo "`date` ビルド開始"
      - echo "GitHubのコミットID | $CODEBUILD_RESOLVED_SOURCE_VERSION"
      - echo "ECRのリポジトリ名 | $IMAGE_REPO_NAME"
      - echo "AWSのアカウントID | $AWS_ACCOUNT_ID"
      - echo "イメージ名 | $IMAGE_NAME"
      - echo "build gradleでビルド"
      - ./gradlew bootBuildImage --imageName $IMAGE_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
  post_build:
    commands:
      # buildフェーズが失敗した場合はpost_buildも終了させる
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
      - echo "`date` ビルド完了"
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - docker tag $IMAGE_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo "イメージをECRにプッシュ"
      - docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
      # Amazon ECS Blue/Greenデプロイアクション用のimageDetail.jsonを作成する
      # https://docs.aws.amazon.com/ja_jp/codepipeline/latest/userguide/file-reference.html#file-reference-ecs-bluegreen
      - echo "imageDetail.jsonを生成"
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - .aws/*
